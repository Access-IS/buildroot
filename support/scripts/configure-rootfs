#!/usr/bin/env bash
echo "configuring  rootfs"

# remove entries from inittab 
sed -i '/si0/d' output/target/etc/inittab
sed -i '/si1/d' output/target/etc/inittab
sed -i '/shd1/d' output/target/etc/inittab
sed -i '/shd2/d' output/target/etc/inittab

rm -rf output/target/etc/dropbear
mkdir output/target/etc/dropbear
cp system/dropbear_ecdsa_host_key output/target/etc/dropbear/
cd output/target/usr/share/terminfo/x/
if [ ! -L xterm-256color ]; then
	ln -s xterm-color xterm-256color
fi
cd -

cat > output/target/root/gadget <<EOF
#!/bin/sh
mkdir /sys/kernel/config/usb_gadget/g1
cd /sys/kernel/config/usb_gadget/g1 
echo 0x1d6b > idVendor # Linux Foundation
echo 0x0104 > idProduct # Multifunction Composite Gadget
echo 0x0100 > bcdDevice # v1.0.0
echo 0x0200 > bcdUSB # USB2
mkdir -p strings/0x409
echo "fedcba9876543210" > strings/0x409/serialnumber
echo "Access IS" > strings/0x409/manufacturer 
echo "multifunction gadget" > strings/0x409/product 
mkdir -p functions/ecm.usb0
mkdir -p configs/c.1/strings/0x409
echo "66:AC:4F:48:B3:96" > functions/ecm.usb0/host_addr
echo "Config 1: ECM network" > configs/c.1/strings/0x409/configuration 
echo 250 > configs/c.1/MaxPower 
ln -s functions/ecm.usb0 configs/c.1/
echo "ci_hdrc.0" > /sys/kernel/config/usb_gadget/g1/UDC
ifconfig lo up
ifconfig usb0 192.168.99.2 netmask 255.255.255.0 up
exit 0
EOF

chmod +x output/target/root/gadget

cat > output/target/root/uucgadget <<EOF
#!/bin/sh
mkdir /sys/kernel/config/usb_gadget/g1
cd /sys/kernel/config/usb_gadget/g1 
echo 0x066f > idVendor
echo 0x37ff > idProduct
mkdir -p strings/0x409
echo "43210" > strings/0x409/serialnumber
mkdir -p functions/mass_storage.usb0
echo /fat > functions/mass_storage.usb0/lun.0/file
echo 1 > functions/mass_storage.usb0/stall
mkdir -p configs/c.1/strings/0x409
ln -s functions/mass_storage.usb0 configs/c.1/
echo "ci_hdrc.0" > /sys/kernel/config/usb_gadget/g1/UDC
exit 0
EOF

chmod +x output/target/root/uucgadget


cat > output/target/root/wingadget <<EOF
#!/bin/bash

mkdir -p /sys/kernel/config/usb_gadget/g1
ID_VENDOR="0x1d6b"
ID_PRODUCT="0x0104"
cd /sys/kernel/config/usb_gadget/g1
echo "0x0200" > bcdUSB
echo "0x02" > bDeviceClass
echo "0x00" > bDeviceSubClass
echo "0x3066" > bcdDevice
echo \$ID_VENDOR > idVendor
echo \$ID_PRODUCT > idProduct

# Windows extensions to force config

echo "1" > os_desc/use
echo "0xcd" > os_desc/b_vendor_code
echo "MSFT100" > os_desc/qw_sign

mkdir -p strings/0x409
echo "9112473" > strings/0x409/serialnumber
echo "Access" > strings/0x409/manufacturer
echo "Triptick" > strings/0x409/product

# Config #1 for OSX / Linux

mkdir -p configs/c.1
mkdir -p configs/c.1/strings/0x409
echo "CDC ECM+RNDIS" > configs/c.1/strings/0x409/configuration

mkdir -p functions/acm.usb0
mkdir -p functions/rndis.usb0 # Flippin' Windows

echo "RNDIS" > functions/rndis.usb0/os_desc/interface.rndis/compatible_id
echo "5162001" > functions/rndis.usb0/os_desc/interface.rndis/sub_compatible_id
echo "66:AC:4F:48:B3:97" > functions/rndis.usb0/host_addr


# Set up the rndis device only first
ln -s functions/rndis.usb0 configs/c.1

# Tell Windows to use config #2

ln -s configs/c.1 os_desc

# Show Windows the RNDIS device with
# bDeviceClass 0x02
# bDeviceSubClass 0x02

echo "ci_hdrc.0" > UDC

# Give it time to install

sleep 5

# Yank it back

echo "" > UDC

# Sneak in all the extra goodies

ln -s functions/acm.usb0 configs/c.1


# Reset bDeviceClass to 0x00
# This is essential to make it work in Windows 10
# Basically forces it to use device information
# in the descriptors versus assuming a particular class.

echo "0x00" > bDeviceClass

# Re-attach the gadget

echo "ci_hdrc.0" > UDC

ifconfig lo up
ifconfig usb0 192.168.98.2 up
EOF
chmod +x output/target/root/wingadget




cat > output/target/etc/init.d/S01mount <<EOF
#
# Configure machine
#
rescue_mode=\`fw_printenv -n rescue_mode\`

case "\$1" in
	start)
		echo "Configuring machine..."
        modprobe libcomposite
        mount -t configfs none /sys/kernel/config
		if [ -b "/dev/mtdblock4" ];then 
			mkdir /.base; 
			mount -t jffs2 /dev/mtdblock4 /.base ;
			[ -d /.base/ovl ] || mkdir /.base/ovl ;
			[ -d /.base/persist ] || mkdir /.base/persist ;
		fi
		if [ -f /.base/ovl/mach.squash ]; then
			if [ -f /.base/ovl/MD5SUM ]; then
				if  md5sum -s -c /.base/ovl/MD5SUM  ; then
					echo -n "Creating machine overlay .. "
					mkdir /.lower /.upper /.tmp /petram;
					mount /.base/ovl/mach.squash /.lower;
					mount -t overlay -o lowerdir=/.lower,upperdir=/.upper,workdir=/.tmp  overlay /petram;
                    ln -s /.base/persist /petram/persist
                   
                    touch /.base/.load_ok
					echo "done";
				else
					echo "mach.squash checksum failed, not mounting overlay";
                    
                    case "\$rescue_mode" in
                        uuc)
                            /root/uucgadget;
                        ;;
                        
                        dev)
                            /root/gadget;
                        ;;
                        
                        win)
                            /root/wingadget;
                        ;;
                    
                    esac
					
				fi
			else
				echo "mach.squash present but MD5SUM file not found";
				 case "\$rescue_mode" in
                        uuc)
                            /root/uucgadget;
                        ;;
                        
                        dev)
                            /root/gadget;
                        ;;
                        
                        win)
                            /root/wingadget;
                        ;;
                    
                    esac
			fi
		
		else
			echo "Unconfigured system, starting \$rescue_mode gadget";
			 case "\$rescue_mode" in
                    uuc)
                        /root/uucgadget;
                    ;;
                    
                    dev)
                        /root/gadget;
                    ;;
                    
                    win)
                        /root/wingadget;
                    ;;
                    
            esac
		fi
		;;
	
	stop)
		;;
esac
exit \$?
EOF

chmod +x output/target/etc/init.d/S01mount

cat > output/target/etc/init.d/S99user <<EOF
#
# run scripts in /petram/init/ if mounted
#
case "\$1" in
	start)
        if [ -d /petram/init ]; then
            for i in /petram/init/S??* ; do
                \$i start
            done
        fi
        ;;
    *)
		;;
                    
esac
exit \$?
EOF

chmod +x output/target/etc/init.d/S99user

# create config for uboot-envtools
cat > output/target/etc/fw_env.config <<EOF
/dev/mtd1	0x00000	0x40000
EOF

# add brcm firmware to target
cp -a system/firmware output/target/lib/
